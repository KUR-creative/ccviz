Generate HTML:      hyperpython
Highlight Code:     pygments
functional prog:    funcy

It's too big.
Decompose main.py into smaller pieces of modules.

// TODO
// 먼저 입력 데이터를 정리하고, 데이터를 처리한다.
// 데이터를 모두 처리하고 나서 html을 만든다.
// 만든 페이지들을 저장한다.
-----------------------------------
cmd arg(-> config)
constants(input + config)
    - TARGET_ZIP
    - INPUT_DIR
    - TARGET_CARS
    - OUTPUT_ROOT
    - OUTPUT_DIRS
    - CONFIG
    - ABS_THRESHOLD, REL_THRESHOLD

-----------------------------------
copy *fixed* scripts function

common html tag gen functions
    - document_str(really common)
    - popup_btn(-> comp.html)
    - popup_window(-> comp.html)
    - car2btn_name(-> index.html)

-----------------------------------
generate: index.html

generate: ... in n(target-cars) * n(output-dirs)
{
실제로 fixed 파일들 카피함.
highlight_css도 생성하고 저장
____
- highlight(-> comp.html)
- comp_table(-> comp.html) // TODO: 이후에 매칭 뷰 페이지 추가됨
    header
    매치쌍 딕셔너리 -> match_pairs
    match_pairs -> range_infos --|
    match_pairs -> match_stats --+--> data
    return comp_table_tag <- data
- gen_comp_html 
    A,Binfo    ->
    table_info ->
    srcA,B     ->
    table      ->
    temp_match -> // TODO: 나중에는 매칭의 쌍이 될 거임.
                  comp_html_string
    return comp_html_string
- tag_regex: tag-name -> regex
- all_pre: html-str -> [pre, pre, ..]
- emphasized: line, color -> colored-line
- rand_html_color: -> html-color-str
----
- read_json: path -> json_dict
- raw2real: root, descendant  -> path
- code: proj, fidx, fpath     -> Code(proj, fidx, fpath, highlight(fu.read_text(fpath)))
- match: proj, raw_match, abs_score, rel_score  -> Match
- match2raw: match  -> Match
- x_id: match_or_code   -> (match_or_code.proj, match_or_code.fidx)
- ab_fidx: codeA_codeB  -> (a.fidx, b.fidx)

Code, Matach, MatchStat

// TODO: 문제점 - 한 블럭이 너무 크고 의존하는 값이 너무 길게 이어진다.
// 쪼개야 한다.
// 애초에 왜 이 짓을 하는가? 
// 각 코드 쌍에서 매치되는 부분을 같은 색으로 칠하기 위해서다.
// 정말 간단한 작업이다:
//  1. 매칭이 존재하는 모든 소스코드 쌍에 대해서
//  2. 서로 연관된 매칭에는 같은 색을 할당하고
//  3. 색칠한 소스 코드 쌍을 만든다.
//  4. 소스 코드 쌍에서 comp.html을 만들고 -> 저장한다.
// 지금 코드에 색칠하는 것과 매칭 위치 찾기가 하나의 함수(emphasize)로 엮여있다.
//
// 값이 아니라 proj id, fidx 같은 걸 써서 문제가 되나?
root_dir, TARGET_CAR -> car_dict
root_dir, car_dict -> A/B_srcpaths

A/B_srcpaths -> codes -> code_dic  // code

car_dict -> raw_A/B_ms  (아마 raw A/B matches 정도 의미인 듯) // match
car_dict -> match_stats

match_stats -> abs/rel_scores
raw_A/B_ms, abs/rel_scores -> match_pairs (모든 매칭)
// 매치가 두 개로 분리되고, 둘을 묶는 일을 했던게 복잡함의 원인이었던 것 같다.
// 하나를 하나로 취급해야 하는데, 그러지 않았다. 
// 또, srcPart의 쌍을 Matches와 MatchStats의 key로 쓰면 될 거 같다.

match_pairs -> match_pair_dic
match_pairs -> unique_match_pairs (파일 쌍에 대해서 유니크한 매칭들)
match_pairs,match_stats -> match_stat_dic

unique_match_pairs -> html_paths
unique_match_pairs,code_dic -> match_name_pairs

----
- emphasize: code_dic, match_pair_dic, codeA/B -> (codeA,codeB) 색칠됨 
    match_pair_dic -> css,colors --connected_components생성--> color_dic

unique_match_pairs -> emphasized_AB
unique_match_pairs, emphasized_AB, A/B_srcpaths -> comp_htmls
generate: html_paths, comp_htmls, OUTPUT_DIR 

----
- match_link
- link_row
match_name_pairs, unique_match_pairs, html_paths -> overview.html
generate: overview.html
}
